# LibEtude CMake 설정 파일
# Copyright (c) 2025 LibEtude Project

@PACKAGE_INIT@

# 버전 정보
set(LIBETUDE_VERSION "@PROJECT_VERSION@")
set(LIBETUDE_VERSION_MAJOR "@PROJECT_VERSION_MAJOR@")
set(LIBETUDE_VERSION_MINOR "@PROJECT_VERSION_MINOR@")
set(LIBETUDE_VERSION_PATCH "@PROJECT_VERSION_PATCH@")

# 설치 경로
set(LIBETUDE_INSTALL_PREFIX "@CMAKE_INSTALL_PREFIX@")
set(LIBETUDE_INCLUDE_DIRS "@CMAKE_INSTALL_PREFIX@/include")
set(LIBETUDE_LIBRARY_DIRS "@CMAKE_INSTALL_PREFIX@/lib")

# 라이브러리 파일
if(WIN32)
    # Windows에서는 정적/동적 라이브러리 모두 지원
    # 플랫폼별 라이브러리 경로 설정
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(LIBETUDE_ARCH "x64")
    elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
        set(LIBETUDE_ARCH "Win32")
    endif()

    if(CMAKE_SYSTEM_PROCESSOR MATCHES "ARM64")
        set(LIBETUDE_ARCH "ARM64")
    endif()

    # 구성별 라이브러리 경로
    set(LIBETUDE_STATIC_LIBRARY_RELEASE "@CMAKE_INSTALL_PREFIX@/lib/${LIBETUDE_ARCH}/Release/libetude.lib")
    set(LIBETUDE_STATIC_LIBRARY_DEBUG "@CMAKE_INSTALL_PREFIX@/lib/${LIBETUDE_ARCH}/Debug/libetude.lib")
    set(LIBETUDE_SHARED_LIBRARY_RELEASE "@CMAKE_INSTALL_PREFIX@/bin/${LIBETUDE_ARCH}/Release/libetude.dll")
    set(LIBETUDE_SHARED_LIBRARY_DEBUG "@CMAKE_INSTALL_PREFIX@/bin/${LIBETUDE_ARCH}/Debug/libetude.dll")
    set(LIBETUDE_IMPORT_LIBRARY_RELEASE "@CMAKE_INSTALL_PREFIX@/lib/${LIBETUDE_ARCH}/Release/libetude_import.lib")
    set(LIBETUDE_IMPORT_LIBRARY_DEBUG "@CMAKE_INSTALL_PREFIX@/lib/${LIBETUDE_ARCH}/Debug/libetude_import.lib")

    # 구성에 따른 라이브러리 선택
    if(CMAKE_BUILD_TYPE STREQUAL "Debug")
        set(LIBETUDE_STATIC_LIBRARY ${LIBETUDE_STATIC_LIBRARY_DEBUG})
        set(LIBETUDE_SHARED_LIBRARY ${LIBETUDE_SHARED_LIBRARY_DEBUG})
        set(LIBETUDE_IMPORT_LIBRARY ${LIBETUDE_IMPORT_LIBRARY_DEBUG})
    else()
        set(LIBETUDE_STATIC_LIBRARY ${LIBETUDE_STATIC_LIBRARY_RELEASE})
        set(LIBETUDE_SHARED_LIBRARY ${LIBETUDE_SHARED_LIBRARY_RELEASE})
        set(LIBETUDE_IMPORT_LIBRARY ${LIBETUDE_IMPORT_LIBRARY_RELEASE})
    endif()

    # 기본적으로 정적 라이브러리 사용
    set(LIBETUDE_LIBRARIES ${LIBETUDE_STATIC_LIBRARY})
else()
    set(LIBETUDE_LIBRARIES "@CMAKE_INSTALL_PREFIX@/lib/libetude.a")
endif()

# 컴파일 정의
set(LIBETUDE_DEFINITIONS "")

# 플랫폼별 설정
if(WIN32)
    # Windows 특화 설정
    list(APPEND LIBETUDE_DEFINITIONS
        -DLIBETUDE_PLATFORM_WINDOWS=1
        -D_WIN32_WINNT=0x0A00
        -DWIN32_LEAN_AND_MEAN
        -DNOMINMAX
        -DUNICODE
        -D_UNICODE
    )

    # Windows 시스템 라이브러리
    set(LIBETUDE_WINDOWS_LIBRARIES
        kernel32 user32 gdi32 ole32 oleaut32 uuid advapi32 shell32
        comdlg32 winspool winmm dsound ksuser mmdevapi audioses avrt
        ws2_32 iphlpapi crypt32 secur32 pdh
    )

    # MSVC 특화 설정
    if(MSVC)
        list(APPEND LIBETUDE_DEFINITIONS
            -D_CRT_SECURE_NO_WARNINGS
            -D_CRT_SECURE_NO_DEPRECATE
            -D_CRT_NONSTDC_NO_WARNINGS
        )
    endif()
elseif(APPLE)
    # macOS 특화 설정
    list(APPEND LIBETUDE_DEFINITIONS -DLIBETUDE_PLATFORM_MACOS=1)
    set(LIBETUDE_MACOS_FRAMEWORKS
        "-framework CoreAudio"
        "-framework AudioUnit"
        "-framework AudioToolbox"
    )
elseif(UNIX)
    # Linux 특화 설정
    list(APPEND LIBETUDE_DEFINITIONS -DLIBETUDE_PLATFORM_LINUX=1)
endif()

# 기능 지원 플래그
set(LIBETUDE_FEATURES "")

# SIMD 지원
if(@LIBETUDE_ENABLE_SIMD@)
    list(APPEND LIBETUDE_FEATURES "SIMD")
    list(APPEND LIBETUDE_DEFINITIONS -DLIBETUDE_ENABLE_SIMD=1)
endif()

# GPU 가속 지원
if(@LIBETUDE_ENABLE_GPU@)
    list(APPEND LIBETUDE_FEATURES "GPU")
    list(APPEND LIBETUDE_DEFINITIONS -DLIBETUDE_ENABLE_GPU=1)
endif()

# 최소 빌드 모드
if(@LIBETUDE_MINIMAL@)
    list(APPEND LIBETUDE_FEATURES "MINIMAL")
    list(APPEND LIBETUDE_DEFINITIONS -DLIBETUDE_MINIMAL=1)
endif()

# 타겟 생성 함수
function(libetude_add_executable target_name)
    add_executable(${target_name} ${ARGN})

    # 포함 디렉토리 설정
    target_include_directories(${target_name} PRIVATE ${LIBETUDE_INCLUDE_DIRS})

    # 라이브러리 링크
    target_link_libraries(${target_name} PRIVATE ${LIBETUDE_LIBRARIES})

    # 컴파일 정의 설정
    target_compile_definitions(${target_name} PRIVATE ${LIBETUDE_DEFINITIONS})

    # 플랫폼별 라이브러리 링크
    if(WIN32)
        target_link_libraries(${target_name} PRIVATE ${LIBETUDE_WINDOWS_LIBRARIES})
    elseif(APPLE)
        target_link_libraries(${target_name} PRIVATE ${LIBETUDE_MACOS_FRAMEWORKS})
    endif()

    # C/C++ 표준 설정
    set_target_properties(${target_name} PROPERTIES
        C_STANDARD 11
        C_STANDARD_REQUIRED ON
        CXX_STANDARD 17
        CXX_STANDARD_REQUIRED ON
    )
endfunction()

# 라이브러리 생성 함수
function(libetude_add_library target_name)
    add_library(${target_name} ${ARGN})

    # 포함 디렉토리 설정
    target_include_directories(${target_name} PRIVATE ${LIBETUDE_INCLUDE_DIRS})

    # 라이브러리 링크
    target_link_libraries(${target_name} PRIVATE ${LIBETUDE_LIBRARIES})

    # 컴파일 정의 설정
    target_compile_definitions(${target_name} PRIVATE ${LIBETUDE_DEFINITIONS})

    # 플랫폼별 라이브러리 링크
    if(WIN32)
        target_link_libraries(${target_name} PRIVATE ${LIBETUDE_WINDOWS_LIBRARIES})
    elseif(APPLE)
        target_link_libraries(${target_name} PRIVATE ${LIBETUDE_MACOS_FRAMEWORKS})
    endif()

    # C/C++ 표준 설정
    set_target_properties(${target_name} PROPERTIES
        C_STANDARD 11
        C_STANDARD_REQUIRED ON
        CXX_STANDARD 17
        CXX_STANDARD_REQUIRED ON
    )
endfunction()

# 버전 호환성 확인
set(PACKAGE_VERSION "@PROJECT_VERSION@")

if(PACKAGE_VERSION VERSION_LESS PACKAGE_FIND_VERSION)
    set(PACKAGE_VERSION_COMPATIBLE FALSE)
else()
    set(PACKAGE_VERSION_COMPATIBLE TRUE)
    if(PACKAGE_VERSION VERSION_EQUAL PACKAGE_FIND_VERSION)
        set(PACKAGE_VERSION_EXACT TRUE)
    endif()
endif()

# 필수 구성 요소 확인
include(CMakeFindDependencyMacro)

# 스레드 라이브러리 필요
find_dependency(Threads REQUIRED)

# Windows에서 추가 의존성 확인
if(WIN32)
    # Windows SDK 확인
    if(NOT CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION)
        message(STATUS "Windows SDK 버전을 자동으로 감지합니다.")
    endif()

    # Windows 특화 CMake 모듈 포함
    include("${CMAKE_CURRENT_LIST_DIR}/WindowsConfig.cmake")

    # Windows 특화 변수 설정
    set_windows_cmake_variables()

    # Windows 개발 환경 검증
    validate_windows_development_environment()
endif()

# 구성 요소별 라이브러리 설정
set(LIBETUDE_FOUND TRUE)

# Runtime 구성 요소
if("Runtime" IN_LIST LibEtude_FIND_COMPONENTS)
    if(EXISTS "${LIBETUDE_SHARED_LIBRARY}" OR EXISTS "${LIBETUDE_STATIC_LIBRARY}")
        set(LibEtude_Runtime_FOUND TRUE)
    else()
        set(LibEtude_Runtime_FOUND FALSE)
        set(LIBETUDE_FOUND FALSE)
    endif()
endif()

# Development 구성 요소
if("Development" IN_LIST LibEtude_FIND_COMPONENTS)
    if(EXISTS "${LIBETUDE_INCLUDE_DIRS}/libetude/api.h")
        set(LibEtude_Development_FOUND TRUE)
    else()
        set(LibEtude_Development_FOUND FALSE)
        set(LIBETUDE_FOUND FALSE)
    endif()
endif()

# 가져온 타겟 생성
if(WIN32)
    libetude_create_imported_target()
endif()

# 정보 출력
if(LIBETUDE_FOUND)
    message(STATUS "LibEtude ${LIBETUDE_VERSION} 발견")
    message(STATUS "  포함 디렉토리: ${LIBETUDE_INCLUDE_DIRS}")
    message(STATUS "  라이브러리: ${LIBETUDE_LIBRARIES}")
    message(STATUS "  지원 기능: ${LIBETUDE_FEATURES}")

    if(WIN32)
        message(STATUS "  Windows 라이브러리: ${LIBETUDE_WINDOWS_LIBRARIES}")
        message(STATUS "  대상 아키텍처: ${LIBETUDE_ARCH}")
        message(STATUS "  가져온 타겟: LibEtude::LibEtude")
    endif()
endif()

check_required_components(LibEtude)